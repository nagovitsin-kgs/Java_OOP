package Terms_Code;

// Внутренние и вложенные классы.
/**
 * Классы могут быть вложенными (nested), то есть могут быть определены внутри
 * других классов. Частным случаем вложенных классов являются внутренние классы
 * (inner class).
 * 
 * Внутренний класс ведет себя как обычный класс за тем исключением, что его
 * объекты могут быть созданы только внутри внешнего класса.
 * 
 * Внутренний класс имеет доступ ко всем полям внешнего класса, в том числе
 * закрытым с помощью модификатора private. Аналогично внешний класс имеет
 * доступ ко всем членам внутреннего класса, в том числе к полям и методам с
 * модификатором private.
 * 
 * Объекты внутренних классов могут быть созданы только в том классе, в котором
 * внутренние классы опеределены. В других внешних классах объекты внутреннего
 * класса создать нельзя.
 * 
 * Еще одной особенностью внутренних классов является то, что их можно объявить
 * внутри любого контекста, в том числе внутри метода и даже в цикле:
 * 
 */
public class Program_19 {
    public static void main(String[] args) {

        Person19 tom = new Person19("Tom");
        tom.setAccount("qwerty"); // Account Login: Tom Password: qwerty
    }
}

class Person19 {

    private String name;

    Person19(String name) {
        this.name = name;
    }

    public void setAccount(String password) {

        class Account { // вложенный внутренний класс, можно объявить внутри метода

            void display() {
                System.out.printf("Account Login: %s \t Password: %s \n", name, password);
            }
        }
        Account account = new Account();
        account.display();
    }
}
