package Terms_Code.study;

/**
 * Как правило, названия пакетов соответствуют физической структуре проекта, то
 * есть организации каталогов, в которых находятся файлы с исходным кодом. А
 * путь к файлам внутри проекта соответствует названию пакета этих файлов.
 * 
 * Например, если классы принадлежат пакету mypack, то эти классы помещаются в
 * проекте в папку mypack.
 * 
 * Классы необязательно определять в пакеты. Если для класса пакет не определен,
 * то считается, что данный класс находится в пакете по умолчанию, который не
 * имеет имени.
 * 
 * Например, создадим в папке для исходных файлов каталог Terms_Code.study.
 * В нем создадим файл Program.java со следующим кодом ниже.
 * 
 * Директива package Terms_Code.study в начале файла указывает, что классы
 * Program и Person, которые здесь определены, принадлежат пакету
 * Terms_Code.study.
 * 
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Когда мы работаем в среде разработки, например, в Netbeans, то IDE берет на
 * себя все вопросы компиляции пакетов и входящих в них файлов. Соответственно
 * нам достаточно нажать на кнопку, и все будет готово. Однако если мы
 * компилируем программу в командной строке, то мы можем столкнуться с
 * некоторыми трудностями. Поэтому рассмотрим этот аспект.
 * 
 * Для компиляции программы вначале в командной строке/терминале с помощью
 * команды cd перейдем к папке, где находится каталог Terms_Code.study: !!!!!!
 * 
 * В терминале:
 * cd C:\Users\\user\Java_OOP\src\Terms_Code\study
 * 
 * // Например, в моем случае это каталог C:\java
 * (то есть файл с исходным кодом расположен по пути
 * C:\java\study\Program.java).
 * 
 * Для компиляции выполним команду:
 * javac Terms_Code.study\Program.java
 * 
 * После этого в папке Terms_Code.study появятся скомпилированные файлы
 * Program.class
 * и Person.class.
 * 
 * Для запуска программы выполним команду:
 * java Terms_Code.study.Program
 * Так почемуто не работает!))
 */
public class Program {

    public static void main(String[] args) {

        Person kate = new Person("Kate", 32);
        kate.displayInfo();
    }
}

class Person {

    String name;
    int age;

    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    void displayInfo() {
        System.out.printf("Name: %s \t Age: %d \n", name, age);
    }
}
