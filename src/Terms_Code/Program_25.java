package Terms_Code;

// Запрет наследования.
/**
 * Хотя наследование очень интересный и эффективный механизм, но в некоторых
 * ситуациях его применение может быть нежелательным. И в этом случае можно
 * запретить наследование с помощью ключевого слова final.
 * 
 * Например:
 */

public class Program_25 {
    public static void main(String[] args) {
        // .........
    }
}

// Базовый класс, запрет наследования:

final class Person25 {
    // ......
}

// Если бы класс Person25 был бы определен таким образом, то следующий код был
// бы ошибочным и не сработал, так как мы тем самым запретили наследование:

class Employee extends Person25 {
    // запрет наследования
}

// Кроме запрета наследования можно также запретить переопределение отдельных
// методов.
// Например, в примере (Program_24) переопределен метод display(), запретим его
// переопределение, и в этом случае класс Employee24 не сможет переопределить
// метод display.

// Пример в нашем случае ниже:

class Person {

    // ........................

    public final void display() { // запрет переопределения метода

        System.out.println("Имя: " + name);
    }
}

class Employee extends Person {

    // .....

    @Override
    public void display() {
        // нельзя переопределить, так как запрет на переопределение
        // в методе final void display() базового класса Person
    }
}
